
~~~~~~~~~ In function: zif_swoole_async_read ~~~~~~~~~
Future-condition checking for 'open': Failed!
* TRS:
* ├── ⊤|-fd≥0
* │   └── deref(req) |- (!close(fd))^* · close(fd) · (_)^*  [Unfold]
* │       └── 𝝐 |- (!close(fd))^* · close(fd) · (_)^*  [Disprove]
* ├── ⊤|-fd≥0
* │   └── deref(req) · deref(req) |- (!close(fd))^* · close(fd) · (_)^*  [Unfold]
* │       └── deref(req) |- (!close(fd))^* · close(fd) · (_)^*  [Unfold]
* │           └── 𝝐 |- (!close(fd))^* · close(fd) · (_)^*  [Disprove]
* ├── fd<0∧fd≥0|-fd≥0
* │   └── fd<0∧fd≥0  [Prove]
* └── fd<0∧fd≥0|-fd≥0
*     └── fd<0∧fd≥0  [Prove]

<======[Bidirectional Bug Localisation & Possible Proof Repairs]======>

[Repair Options] ⊤ /\ 𝝐 ~~~> (!close(fd))^* · close(fd) · (_)^*;
⊤ /\ 𝝐 ~~~> (!close(fd))^* · close(fd) · (_)^*;
[Patches] synthsisFromSpec (⊤ /\ (!close(fd))^* · close(fd) · (_)^*)@ line 353 to line 353 can be inserted with code close(fd); .
[Searching Time] 0.016252040863 seconds.
~~~~~~~~~ In function: zif_swoole_async_write ~~~~~~~~~
Future-condition checking for 'open': Failed!
* TRS:
* ├── ⊤|-fd≥0
* │   └── 𝝐 |- (!close(fd))^* · close(fd) · (_)^*  [Disprove]
* └── fd<0∧fd≥0|-fd≥0
*     └── fd<0∧fd≥0  [Prove]

<======[Bidirectional Bug Localisation & Possible Proof Repairs]======>

[Repair Options] ⊤ /\ 𝝐 ~~~> (!close(fd))^* · close(fd) · (_)^*;
[Patches] synthsisFromSpec (⊤ /\ (!close(fd))^* · close(fd) · (_)^*)@ line 463 to line 463 can be inserted with code close(fd); .
[Searching Time] 5.00679016113e-05 seconds.
~~~~~~~~~ In function: zif_swoole_async_write ~~~~~~~~~
Future-condition checking for 'open': Failed!
* TRS:
* ├── ⊤|-fd≥0
* │   └── 𝝐 |- (!close(fd))^* · close(fd) · (_)^*  [Disprove]
* └── fd<0∧fd≥0|-fd≥0
*     └── fd<0∧fd≥0  [Prove]

<======[Bidirectional Bug Localisation & Possible Proof Repairs]======>

[Repair Options] ⊤ /\ 𝝐 ~~~> (!close(fd))^* · close(fd) · (_)^*;
[Patches] synthsisFromSpec (⊤ /\ (!close(fd))^* · close(fd) · (_)^*)@ line 463 to line 463 can be inserted with code close(fd); .
[Searching Time] 4.79221343994e-05 seconds.
~~~~~~~~~ In function: zif_swoole_async_readfile ~~~~~~~~~
Future-condition checking for 'open': Failed!
* TRS:
* ├── ⊤|-fd≥0
* │   └── deref(req) |- (!close(fd))^* · close(fd) · (_)^*  [Unfold]
* │       └── 𝝐 |- (!close(fd))^* · close(fd) · (_)^*  [Disprove]
* ├── ⊤|-fd≥0
* │   └── deref(req) · deref(req) |- (!close(fd))^* · close(fd) · (_)^*  [Unfold]
* │       └── deref(req) |- (!close(fd))^* · close(fd) · (_)^*  [Unfold]
* │           └── 𝝐 |- (!close(fd))^* · close(fd) · (_)^*  [Disprove]
* ├── fd<0∧fd≥0|-fd≥0
* │   └── fd<0∧fd≥0  [Prove]
* └── fd<0∧fd≥0|-fd≥0
*     └── fd<0∧fd≥0  [Prove]

<======[Bidirectional Bug Localisation & Possible Proof Repairs]======>

[Repair Options] ⊤ /\ 𝝐 ~~~> (!close(fd))^* · close(fd) · (_)^*;
⊤ /\ 𝝐 ~~~> (!close(fd))^* · close(fd) · (_)^*;
[Patches] synthsisFromSpec (⊤ /\ (!close(fd))^* · close(fd) · (_)^*)@ line 533 to line 533 can be inserted with code close(fd); .
[Searching Time] 5.00679016113e-05 seconds.
~~~~~~~~~ In function: zif_swoole_async_writefile ~~~~~~~~~
Future-condition checking for 'open': Failed!
* TRS:
* ├── ⊤|-fd≥0
* │   └── deref(req) |- (!close(fd))^* · close(fd) · (_)^*  [Unfold]
* │       └── 𝝐 |- (!close(fd))^* · close(fd) · (_)^*  [Disprove]
* ├── ⊤|-fd≥0
* │   └── deref(req) · deref(req) |- (!close(fd))^* · close(fd) · (_)^*  [Unfold]
* │       └── deref(req) |- (!close(fd))^* · close(fd) · (_)^*  [Unfold]
* │           └── 𝝐 |- (!close(fd))^* · close(fd) · (_)^*  [Disprove]
* ├── fd<0∧fd≥0|-fd≥0
* │   └── fd<0∧fd≥0  [Prove]
* └── fd<0∧fd≥0|-fd≥0
*     └── fd<0∧fd≥0  [Prove]

<======[Bidirectional Bug Localisation & Possible Proof Repairs]======>

[Repair Options] ⊤ /\ 𝝐 ~~~> (!close(fd))^* · close(fd) · (_)^*;
⊤ /\ 𝝐 ~~~> (!close(fd))^* · close(fd) · (_)^*;
[Patches] synthsisFromSpec (⊤ /\ (!close(fd))^* · close(fd) · (_)^*)@ line 640 to line 640 can be inserted with code close(fd); .
[Searching Time] 5.10215759277e-05 seconds.
~~~~~~~~~ In function: zif_swoole_async_writefile ~~~~~~~~~
Future-condition checking for 'open': Failed!
* TRS:
* ├── ⊤|-fd≥0
* │   └── deref(req) |- (!close(fd))^* · close(fd) · (_)^*  [Unfold]
* │       └── 𝝐 |- (!close(fd))^* · close(fd) · (_)^*  [Disprove]
* ├── ⊤|-fd≥0
* │   └── deref(req) · deref(req) |- (!close(fd))^* · close(fd) · (_)^*  [Unfold]
* │       └── deref(req) |- (!close(fd))^* · close(fd) · (_)^*  [Unfold]
* │           └── 𝝐 |- (!close(fd))^* · close(fd) · (_)^*  [Disprove]
* ├── fd<0∧fd≥0|-fd≥0
* │   └── fd<0∧fd≥0  [Prove]
* └── fd<0∧fd≥0|-fd≥0
*     └── fd<0∧fd≥0  [Prove]

<======[Bidirectional Bug Localisation & Possible Proof Repairs]======>

[Repair Options] ⊤ /\ 𝝐 ~~~> (!close(fd))^* · close(fd) · (_)^*;
⊤ /\ 𝝐 ~~~> (!close(fd))^* · close(fd) · (_)^*;
[Patches] synthsisFromSpec (⊤ /\ (!close(fd))^* · close(fd) · (_)^*)@ line 640 to line 640 can be inserted with code close(fd); .
[Searching Time] 4.88758087158e-05 seconds.
~~~~~~~~~ In function: zim_swoole_http_server_start ~~~~~~~~~
Future-condition checking for 'swArray_new': Failed!
* TRS:
* └── ⊤∧(http_client_array!=0)|-(http_client_array!=0)
*     └── deref(serv_listen_list) · deref(serv_listen_list) |- free(http_client_array)  [Disprove]

<======[Bidirectional Bug Localisation & Possible Proof Repairs]======>

[Repair Options] ⊤∧(http_client_array!=0) /\ deref(serv_listen_list) · deref(serv_listen_list) ~~~> free(http_client_array);
[Patches] synthsisFromSpec (⊤∧(http_client_array!=0) /\ free(http_client_array))@ line 1373 to line 1442 can be inserted with code if ((http_client_array!=0)){free(http_client_array); }.
[Searching Time] 0.0286870002747 seconds.
~~~~~~~~~ In function: zim_swoole_http_server_start ~~~~~~~~~
Future-condition checking for 'swArray_new': Failed!
* TRS:
* └── ⊤∧(http_client_array!=0)|-(http_client_array!=0)
*     └── deref(serv_listen_list) · deref(serv_listen_list) |- free(http_client_array)  [Disprove]

<======[Bidirectional Bug Localisation & Possible Proof Repairs]======>

[Repair Options] ⊤∧(http_client_array!=0) /\ deref(serv_listen_list) · deref(serv_listen_list) ~~~> free(http_client_array);
[Patches] synthsisFromSpec (⊤∧(http_client_array!=0) /\ free(http_client_array))@ line 1373 to line 1442 can be inserted with code if ((http_client_array!=0)){free(http_client_array); }.
[Searching Time] 3.60012054443e-05 seconds.
~~~~~~~~~ In function: http_client_execute ~~~~~~~~~
Future-condition checking for 'open': Failed!
* TRS:
* ├── ⊤|-fd≥0
* │   └── 𝝐 |- (!close(fd))^* · close(fd) · (_)^*  [Disprove]
* ├── ⊤|-fd≥0
* │   └── 𝝐 |- (!close(fd))^* · close(fd) · (_)^*  [Disprove]
* └── fd<0∧ret=1∧fd≥0|-fd≥0
*     └── fd<0∧ret=1∧fd≥0  [Prove]

<======[Bidirectional Bug Localisation & Possible Proof Repairs]======>

[Repair Options] ⊤ /\ 𝝐 ~~~> (!close(fd))^* · close(fd) · (_)^*;
⊤ /\ 𝝐 ~~~> (!close(fd))^* · close(fd) · (_)^*;
[Patches] synthsisFromSpec (⊤ /\ (!close(fd))^* · close(fd) · (_)^*)@ line 386 to line 404 can be inserted with code close(fd); .
[Searching Time] 0.0157570838928 seconds.
~~~~~~~~~ In function: http_client_execute ~~~~~~~~~
Future-condition checking for 'open': Failed!
* TRS:
* ├── ⊤|-fd≥0
* │   └── 𝝐 |- (!close(fd))^* · close(fd) · (_)^*  [Disprove]
* ├── ⊤|-fd≥0
* │   └── 𝝐 |- (!close(fd))^* · close(fd) · (_)^*  [Disprove]
* └── fd<0∧ret=1∧fd≥0|-fd≥0
*     └── fd<0∧ret=1∧fd≥0  [Prove]

<======[Bidirectional Bug Localisation & Possible Proof Repairs]======>

[Repair Options] ⊤ /\ 𝝐 ~~~> (!close(fd))^* · close(fd) · (_)^*;
⊤ /\ 𝝐 ~~~> (!close(fd))^* · close(fd) · (_)^*;
[Patches] synthsisFromSpec (⊤ /\ (!close(fd))^* · close(fd) · (_)^*)@ line 386 to line 404 can be inserted with code close(fd); .
[Searching Time] 8.70227813721e-05 seconds.
~~~~~~~~~ In function: http_client_execute ~~~~~~~~~
Future-condition checking for 'open': Failed!
* TRS:
* ├── ⊤|-fd≥0
* │   └── 𝝐 |- (!close(fd))^* · close(fd) · (_)^*  [Disprove]
* ├── ⊤|-fd≥0
* │   └── 𝝐 |- (!close(fd))^* · close(fd) · (_)^*  [Disprove]
* └── fd<0∧ret=1∧fd≥0|-fd≥0
*     └── fd<0∧ret=1∧fd≥0  [Prove]

<======[Bidirectional Bug Localisation & Possible Proof Repairs]======>

[Repair Options] ⊤ /\ 𝝐 ~~~> (!close(fd))^* · close(fd) · (_)^*;
⊤ /\ 𝝐 ~~~> (!close(fd))^* · close(fd) · (_)^*;
[Patches] synthsisFromSpec (⊤ /\ (!close(fd))^* · close(fd) · (_)^*)@ line 386 to line 404 can be inserted with code close(fd); .
[Searching Time] 9.01222229004e-05 seconds.
~~~~~~~~~ In function: http_client_execute ~~~~~~~~~
Future-condition checking for 'open': Failed!
* TRS:
* ├── ⊤|-fd≥0
* │   └── 𝝐 |- (!close(fd))^* · close(fd) · (_)^*  [Disprove]
* ├── ⊤|-fd≥0
* │   └── 𝝐 |- (!close(fd))^* · close(fd) · (_)^*  [Disprove]
* └── fd<0∧ret=1∧fd≥0|-fd≥0
*     └── fd<0∧ret=1∧fd≥0  [Prove]

<======[Bidirectional Bug Localisation & Possible Proof Repairs]======>

[Repair Options] ⊤ /\ 𝝐 ~~~> (!close(fd))^* · close(fd) · (_)^*;
⊤ /\ 𝝐 ~~~> (!close(fd))^* · close(fd) · (_)^*;
[Patches] synthsisFromSpec (⊤ /\ (!close(fd))^* · close(fd) · (_)^*)@ line 386 to line 404 can be inserted with code close(fd); .
[Searching Time] 8.98838043213e-05 seconds.
~~~~~~~~~ In function: http_client_execute ~~~~~~~~~
Future-condition checking for 'open': Failed!
* TRS:
* ├── ⊤|-fd≥0
* │   └── 𝝐 |- (!close(fd))^* · close(fd) · (_)^*  [Disprove]
* ├── ⊤|-fd≥0
* │   └── 𝝐 |- (!close(fd))^* · close(fd) · (_)^*  [Disprove]
* └── fd<0∧ret=1∧fd≥0|-fd≥0
*     └── fd<0∧ret=1∧fd≥0  [Prove]

<======[Bidirectional Bug Localisation & Possible Proof Repairs]======>

[Repair Options] ⊤ /\ 𝝐 ~~~> (!close(fd))^* · close(fd) · (_)^*;
⊤ /\ 𝝐 ~~~> (!close(fd))^* · close(fd) · (_)^*;
[Patches] synthsisFromSpec (⊤ /\ (!close(fd))^* · close(fd) · (_)^*)@ line 386 to line 404 can be inserted with code close(fd); .
[Searching Time] 8.60691070557e-05 seconds.
~~~~~~~~~ In function: http_client_execute ~~~~~~~~~
Future-condition checking for 'open': Failed!
* TRS:
* ├── ⊤|-fd≥0
* │   └── 𝝐 |- (!close(fd))^* · close(fd) · (_)^*  [Disprove]
* ├── ⊤|-fd≥0
* │   └── 𝝐 |- (!close(fd))^* · close(fd) · (_)^*  [Disprove]
* └── fd<0∧ret=1∧fd≥0|-fd≥0
*     └── fd<0∧ret=1∧fd≥0  [Prove]

<======[Bidirectional Bug Localisation & Possible Proof Repairs]======>

[Repair Options] ⊤ /\ 𝝐 ~~~> (!close(fd))^* · close(fd) · (_)^*;
⊤ /\ 𝝐 ~~~> (!close(fd))^* · close(fd) · (_)^*;
[Patches] synthsisFromSpec (⊤ /\ (!close(fd))^* · close(fd) · (_)^*)@ line 386 to line 404 can be inserted with code close(fd); .
[Searching Time] 8.39233398438e-05 seconds.
~~~~~~~~~ In function: swoole_system_random ~~~~~~~~~
Future-condition checking for 'open': Failed!
* TRS:
* ├── ⊤|-dev_random_fd≥0
* │   └── 𝝐 |- (!close(dev_random_fd))^* · close(dev_random_fd) · (_)^*  [Disprove]
* └── dev_random_fd<0∧dev_random_fd≥0|-dev_random_fd≥0
*     └── dev_random_fd<0∧dev_random_fd≥0  [Prove]

<======[Bidirectional Bug Localisation & Possible Proof Repairs]======>

[Repair Options] ⊤ /\ 𝝐 ~~~> (!close(dev_random_fd))^* · close(dev_random_fd) · (_)^*;
[Patches] synthsisFromSpec (⊤ /\ (!close(dev_random_fd))^* · close(dev_random_fd) · (_)^*)@ line 383 to line 383 can be inserted with code close(dev_random_fd); .
[Searching Time] 0.0158338546753 seconds.
~~~~~~~~~ In function: swoole_file_get_contents ~~~~~~~~~
Future-condition checking for 'open': Failed!
* TRS:
* ├── ⊤|-fd≥0
* │   └── close(fd)@588 · RET(content)@590 |- (!close(fd))^* · close(fd) · (_)^*  [Unfold]
* │       └── RET(content)@590 |- (_)^*  [Unfold]
* │           └── 𝝐 |- (_)^*  [Prove]
* ├── ⊤|-fd≥0
* │   └── 𝝐 |- (!close(fd))^* · close(fd) · (_)^*  [Disprove]
* └── fd<0∧ret=0∧fd≥0|-fd≥0
*     └── fd<0∧ret=0∧fd≥0  [Prove]

<======[Bidirectional Bug Localisation & Possible Proof Repairs]======>

[Repair Options] ⊤ /\ 𝝐 ~~~> (!close(fd))^* · close(fd) · (_)^*;
[Patches] synthsisFromSpec (⊤ /\ (!close(fd))^* · close(fd) · (_)^*)@ line 563 to line 563 can be inserted with code close(fd); .
[Searching Time] 0.000136137008667 seconds.
~~~~~~~~~ In function: swoole_file_get_contents ~~~~~~~~~
Future-condition checking for 'open': Failed!
* TRS:
* ├── ⊤|-fd≥0
* │   └── close(fd)@588 · RET(content)@590 |- (!close(fd))^* · close(fd) · (_)^*  [Unfold]
* │       └── RET(content)@590 |- (_)^*  [Unfold]
* │           └── 𝝐 |- (_)^*  [Prove]
* ├── ⊤|-fd≥0
* │   └── 𝝐 |- (!close(fd))^* · close(fd) · (_)^*  [Disprove]
* └── fd<0∧ret=0∧fd≥0|-fd≥0
*     └── fd<0∧ret=0∧fd≥0  [Prove]

<======[Bidirectional Bug Localisation & Possible Proof Repairs]======>

[Repair Options] ⊤ /\ 𝝐 ~~~> (!close(fd))^* · close(fd) · (_)^*;
[Patches] synthsisFromSpec (⊤ /\ (!close(fd))^* · close(fd) · (_)^*)@ line 563 to line 563 can be inserted with code close(fd); .
[Searching Time] 0.000182151794434 seconds.
~~~~~~~~~ In function: swoole_file_get_contents ~~~~~~~~~
Future-condition checking for 'open': Failed!
* TRS:
* ├── ⊤|-fd≥0
* │   └── close(fd)@588 · RET(content)@590 |- (!close(fd))^* · close(fd) · (_)^*  [Unfold]
* │       └── RET(content)@590 |- (_)^*  [Unfold]
* │           └── 𝝐 |- (_)^*  [Prove]
* ├── ⊤|-fd≥0
* │   └── 𝝐 |- (!close(fd))^* · close(fd) · (_)^*  [Disprove]
* └── fd<0∧ret=0∧fd≥0|-fd≥0
*     └── fd<0∧ret=0∧fd≥0  [Prove]

<======[Bidirectional Bug Localisation & Possible Proof Repairs]======>

[Repair Options] ⊤ /\ 𝝐 ~~~> (!close(fd))^* · close(fd) · (_)^*;
[Patches] synthsisFromSpec (⊤ /\ (!close(fd))^* · close(fd) · (_)^*)@ line 563 to line 563 can be inserted with code close(fd); .
[Searching Time] 0.000161170959473 seconds.
~~~~~~~~~ In function: swLog_init ~~~~~~~~~
Future-condition checking for 'open': Failed!
* TRS:
* ├── ⊤|-SwooleG_log_fd≥0
* │   └── 𝝐 |- (!close(SwooleG_log_fd))^* · close(SwooleG_log_fd) · (_)^*  [Disprove]
* └── SwooleG_log_fd<0∧ret=1∧SwooleG_log_fd≥0|-SwooleG_log_fd≥0
*     └── SwooleG_log_fd<0∧ret=1∧SwooleG_log_fd≥0  [Prove]

<======[Bidirectional Bug Localisation & Possible Proof Repairs]======>

[Repair Options] ⊤ /\ 𝝐 ~~~> (!close(SwooleG_log_fd))^* · close(SwooleG_log_fd) · (_)^*;
[Patches] synthsisFromSpec (⊤ /\ (!close(SwooleG_log_fd))^* · close(SwooleG_log_fd) · (_)^*)@ line 29 to line 30 can be inserted with code close(SwooleG_log_fd); .
[Searching Time] 0.0239140987396 seconds.
~~~~~~~~~ In function: swHashMap_new ~~~~~~~~~
Future-condition checking for 'malloc': Failed!
* TRS:
* ├── ret=hmap∧hmap=0|-hmap=0
* │   └── RET(hmap)@137 |- (!_(hmap))^*  [Disprove]
* ├── ret=0∧hmap=0|-hmap=0
* │   └── free(hmap)@105 |- (!_(hmap))^*  [Disprove]
* └── ret=0∧hmap=0|-hmap=0
*     └── 𝝐 |- (!_(hmap))^*  [Prove]

<======[Bidirectional Bug Localisation & Possible Proof Repairs]======>

[Repair Options] ret=hmap∧hmap=0 /\ RET(hmap)@137 ~~~> (!_(hmap))^*;
ret=0∧hmap=0 /\ free(hmap)@105 ~~~> (!_(hmap))^*;
[Patches] synthsisFromSpec (ret=hmap∧hmap=0 /\ (!_(hmap))^*)@ line 100 to line 137 can be inserted with code if (ret==hmap∧hmap==0){ return; }.
[Searching Time] 1.90734863281e-06 seconds.
~~~~~~~~~ In function: swHashMap_add ~~~~~~~~~
Future-condition checking for 'malloc': Failed!
* TRS:
* ├── ⊤∧node=0|-node=0
* │   └── deref(hmap) · RET(root,node)@153 |- (!_(node))^*  [Unfold]
* │       └── RET(root,node)@153 |- (!_(node))^*  [Disprove]
* └── ret=1∧node=0|-node=0
*     └── 𝝐 |- (!_(node))^*  [Prove]

<======[Bidirectional Bug Localisation & Possible Proof Repairs]======>

[Repair Options] ⊤∧node=0 /\ RET(root,node)@153 ~~~> (!_(node))^*;
[Patches] synthsisFromSpec (⊤∧node=0 /\ (!_(node))^*)@ line 147 to line 153 can be inserted with code if (node==0){ return; }.
[Searching Time] 2.14576721191e-06 seconds.
~~~~~~~~~ In function: swString_new ~~~~~~~~~
Future-condition checking for 'malloc': Failed!
* TRS:
* ├── ret=str∧str=0|-str=0
* │   └── RET(str)@36 |- (!_(str))^*  [Disprove]
* ├── ret=0∧str=0|-str=0
* │   └── free(str)@33 |- (!_(str))^*  [Disprove]
* └── ret=0∧str=0|-str=0
*     └── 𝝐 |- (!_(str))^*  [Prove]

<======[Bidirectional Bug Localisation & Possible Proof Repairs]======>

[Repair Options] ret=str∧str=0 /\ RET(str)@36 ~~~> (!_(str))^*;
ret=0∧str=0 /\ free(str)@33 ~~~> (!_(str))^*;
[Patches] synthsisFromSpec (ret=str∧str=0 /\ (!_(str))^*)@ line 26 to line 36 can be inserted with code if (ret==str∧str==0){ return; }.
[Searching Time] 1.90734863281e-06 seconds.
~~~~~~~~~ In function: swString_dup ~~~~~~~~~
Future-condition checking for 'malloc': Failed!
* TRS:
* ├── ret=str∧str=0|-str=0
* │   └── RET(str)@78 |- (!_(str))^*  [Disprove]
* ├── ret=0∧str=0|-str=0
* │   └── free(str)@74 |- (!_(str))^*  [Disprove]
* └── ret=0∧str=0|-str=0
*     └── 𝝐 |- (!_(str))^*  [Prove]

<======[Bidirectional Bug Localisation & Possible Proof Repairs]======>

[Repair Options] ret=str∧str=0 /\ RET(str)@78 ~~~> (!_(str))^*;
ret=0∧str=0 /\ free(str)@74 ~~~> (!_(str))^*;
[Patches] synthsisFromSpec (ret=str∧str=0 /\ (!_(str))^*)@ line 65 to line 78 can be inserted with code if (ret==str∧str==0){ return; }.
[Searching Time] 1.90734863281e-06 seconds.
~~~~~~~~~ In function: swSocket_sendfile_sync ~~~~~~~~~
Future-condition checking for 'open': Failed!
* TRS:
* ├── ⊤|-file_fd≥0
* │   └── deref(file_stat) · close(file_fd)@65 |- (!close(file_fd))^* · close(file_fd) · (_)^*  [Unfold]
* │       └── close(file_fd)@65 |- (!close(file_fd))^* · close(file_fd) · (_)^*  [Unfold]
* │           └── 𝝐 |- (_)^*  [Prove]
* ├── ⊤|-file_fd≥0
* │   └── 𝝐 |- (!close(file_fd))^* · close(file_fd) · (_)^*  [Disprove]
* └── file_fd<0∧ret=1∧file_fd≥0|-file_fd≥0
*     └── file_fd<0∧ret=1∧file_fd≥0  [Prove]

<======[Bidirectional Bug Localisation & Possible Proof Repairs]======>

[Repair Options] ⊤ /\ 𝝐 ~~~> (!close(file_fd))^* · close(file_fd) · (_)^*;
[Patches] synthsisFromSpec (⊤ /\ (!close(file_fd))^* · close(file_fd) · (_)^*)@ line 36 to line 36 can be inserted with code close(file_fd); .
[Searching Time] 0.0157918930054 seconds.
~~~~~~~~~ In function: swLinkedList_new ~~~~~~~~~
Future-condition checking for 'malloc': Failed!
* TRS:
* ├── ret=q∧q=0|-q=0
* │   └── RET(q)@30 |- (!_(q))^*  [Disprove]
* └── ret=0∧q=0|-q=0
*     └── 𝝐 |- (!_(q))^*  [Prove]

<======[Bidirectional Bug Localisation & Possible Proof Repairs]======>

[Repair Options] ret=q∧q=0 /\ RET(q)@30 ~~~> (!_(q))^*;
[Patches] synthsisFromSpec (ret=q∧q=0 /\ (!_(q))^*)@ line 26 to line 30 can be inserted with code if (ret==q∧q==0){ return; }.
[Searching Time] 9.53674316406e-07 seconds.
~~~~~~~~~ In function: swHeap_new ~~~~~~~~~
Future-condition checking for 'malloc': Failed!
* TRS:
* ├── ret=heap∧heap=0|-heap=0
* │   └── RET(heap)@43 |- (!_(heap))^*  [Disprove]
* ├── ret=0∧heap=0|-heap=0
* │   └── free(heap)@37 |- (!_(heap))^*  [Disprove]
* └── ret=0∧heap=0|-heap=0
*     └── 𝝐 |- (!_(heap))^*  [Prove]

<======[Bidirectional Bug Localisation & Possible Proof Repairs]======>

[Repair Options] ret=heap∧heap=0 /\ RET(heap)@43 ~~~> (!_(heap))^*;
ret=0∧heap=0 /\ free(heap)@37 ~~~> (!_(heap))^*;
[Patches] synthsisFromSpec (ret=heap∧heap=0 /\ (!_(heap))^*)@ line 34 to line 43 can be inserted with code if (ret==heap∧heap==0){ return; }.
[Searching Time] 2.86102294922e-06 seconds.
~~~~~~~~~ In function: swHeap_push ~~~~~~~~~
Future-condition checking for 'malloc': Failed!
* TRS:
* ├── ret=node∧node=0|-node=0
* │   └── RET(node)@147 |- (!_(node))^*  [Disprove]
* └── ret=0∧node=0|-node=0
*     └── 𝝐 |- (!_(node))^*  [Prove]

<======[Bidirectional Bug Localisation & Possible Proof Repairs]======>

[Repair Options] ret=node∧node=0 /\ RET(node)@147 ~~~> (!_(node))^*;
[Patches] synthsisFromSpec (ret=node∧node=0 /\ (!_(node))^*)@ line 141 to line 147 can be inserted with code if (ret==node∧node==0){ return; }.
[Searching Time] 9.53674316406e-07 seconds.
~~~~~~~~~ In function: swMalloc_new ~~~~~~~~~
Future-condition checking for 'malloc': Failed!
* TRS:
* ├── ret=pool∧pool=0|-pool=0
* │   └── RET(pool)@34 |- (!_(pool))^*  [Disprove]
* └── ret=0∧pool=0|-pool=0
*     └── 𝝐 |- (!_(pool))^*  [Prove]

<======[Bidirectional Bug Localisation & Possible Proof Repairs]======>

[Repair Options] ret=pool∧pool=0 /\ RET(pool)@34 ~~~> (!_(pool))^*;
[Patches] synthsisFromSpec (ret=pool∧pool=0 /\ (!_(pool))^*)@ line 30 to line 34 can be inserted with code if (ret==pool∧pool==0){ return; }.
[Searching Time] 2.14576721191e-06 seconds.
~~~~~~~~~ In function: swTableColumn_add ~~~~~~~~~
Future-condition checking for 'malloc': Failed!
* TRS:
* ├── ⊤∧col=0|-col=0
* │   └── RET(table_columns,name,len,col)@131 |- (!_(col))^*  [Disprove]
* └── ret=1∧col=0|-col=0
*     └── 𝝐 |- (!_(col))^*  [Prove]

<======[Bidirectional Bug Localisation & Possible Proof Repairs]======>

[Repair Options] ⊤∧col=0 /\ RET(table_columns,name,len,col)@131 ~~~> (!_(col))^*;
[Patches] synthsisFromSpec (⊤∧col=0 /\ (!_(col))^*)@ line 90 to line 131 can be inserted with code if (col==0){ return; }.
[Searching Time] 9.53674316406e-07 seconds.
~~~~~~~~~ In function: swBuffer_new ~~~~~~~~~
Future-condition checking for 'malloc': Failed!
* TRS:
* ├── ret=buffer∧buffer=0|-buffer=0
* │   └── RET(buffer)@35 |- (!_(buffer))^*  [Disprove]
* └── ret=0∧buffer=0|-buffer=0
*     └── 𝝐 |- (!_(buffer))^*  [Prove]

<======[Bidirectional Bug Localisation & Possible Proof Repairs]======>

[Repair Options] ret=buffer∧buffer=0 /\ RET(buffer)@35 ~~~> (!_(buffer))^*;
[Patches] synthsisFromSpec (ret=buffer∧buffer=0 /\ (!_(buffer))^*)@ line 30 to line 35 can be inserted with code if (ret==buffer∧buffer==0){ return; }.
[Searching Time] 1.90734863281e-06 seconds.
~~~~~~~~~ In function: swBuffer_new_trunk ~~~~~~~~~
Future-condition checking for 'malloc': Failed!
* TRS:
* ├── ret=chunk∧chunk=0|-chunk=0
* │   └── RET(chunk)@79 |- (!_(chunk))^*  [Disprove]
* ├── ret=0∧chunk=0|-chunk=0
* │   └── free(chunk)@59 |- (!_(chunk))^*  [Disprove]
* └── ret=0∧chunk=0|-chunk=0
*     └── 𝝐 |- (!_(chunk))^*  [Prove]

<======[Bidirectional Bug Localisation & Possible Proof Repairs]======>

[Repair Options] ret=chunk∧chunk=0 /\ RET(chunk)@79 ~~~> (!_(chunk))^*;
ret=0∧chunk=0 /\ free(chunk)@59 ~~~> (!_(chunk))^*;
[Patches] synthsisFromSpec (ret=chunk∧chunk=0 /\ (!_(chunk))^*)@ line 48 to line 79 can be inserted with code if (ret==chunk∧chunk==0){ return; }.
[Searching Time] 1.19209289551e-06 seconds.
~~~~~~~~~ In function: swReactor_create ~~~~~~~~~
Future-condition checking for 'swArray_new': Failed!
* TRS:
* ├── ⊤∧(reactor_socket_array!=0)|-(reactor_socket_array!=0)
* │   └── RET(ret)@59 |- free(reactor_socket_array)  [Disprove]
* └── ret=1∧(reactor_socket_array!=0)|-(reactor_socket_array!=0)
*     └── 𝝐 |- free(reactor_socket_array)  [Disprove]

<======[Bidirectional Bug Localisation & Possible Proof Repairs]======>

[Repair Options] ⊤∧(reactor_socket_array!=0) /\ RET(ret)@59 ~~~> free(reactor_socket_array);
ret=1∧(reactor_socket_array!=0) /\ 𝝐 ~~~> free(reactor_socket_array);
[Patches] synthsisFromSpec (⊤∧(reactor_socket_array!=0) /\ free(reactor_socket_array))@ line 53 to line 59 can be inserted with code if ((reactor_socket_array!=0)){free(reactor_socket_array); }.
[Searching Time] 0.0408751964569 seconds.
~~~~~~~~~ In function: swServer_create_worker_buffer ~~~~~~~~~
Future-condition checking for 'malloc': Failed!
* TRS:
* ├── ret=buffers∧buffers=0|-buffers=0
* │   └── RET(buffers)@481 |- (!_(buffers))^*  [Disprove]
* └── ret=0∧buffers=0|-buffers=0
*     └── 𝝐 |- (!_(buffers))^*  [Prove]

<======[Bidirectional Bug Localisation & Possible Proof Repairs]======>

[Repair Options] ret=buffers∧buffers=0 /\ RET(buffers)@481 ~~~> (!_(buffers))^*;
[Patches] synthsisFromSpec (ret=buffers∧buffers=0 /\ (!_(buffers))^*)@ line 469 to line 481 can be inserted with code if (ret==buffers∧buffers==0){ return; }.
[Searching Time] 1.90734863281e-06 seconds.
~~~~~~~~~ In function: swServer_create_worker_buffer ~~~~~~~~~
Future-condition checking for 'malloc': Failed!
* TRS:
* ├── ret=buffers∧buffers=0|-buffers=0
* │   └── RET(buffers)@481 |- (!_(buffers))^*  [Disprove]
* └── ret=0∧buffers=0|-buffers=0
*     └── 𝝐 |- (!_(buffers))^*  [Prove]

<======[Bidirectional Bug Localisation & Possible Proof Repairs]======>

[Repair Options] ret=buffers∧buffers=0 /\ RET(buffers)@481 ~~~> (!_(buffers))^*;
[Patches] synthsisFromSpec (ret=buffers∧buffers=0 /\ (!_(buffers))^*)@ line 469 to line 481 can be inserted with code if (ret==buffers∧buffers==0){ return; }.
[Searching Time] 9.53674316406e-07 seconds.
~~~~~~~~~ In function: swServer_create_worker_buffer ~~~~~~~~~
Future-condition checking for 'malloc': Failed!
* TRS:
* ├── ret=buffers∧buffers=0|-buffers=0
* │   └── RET(buffers)@481 |- (!_(buffers))^*  [Disprove]
* └── ret=0∧buffers=0|-buffers=0
*     └── 𝝐 |- (!_(buffers))^*  [Prove]

<======[Bidirectional Bug Localisation & Possible Proof Repairs]======>

[Repair Options] ret=buffers∧buffers=0 /\ RET(buffers)@481 ~~~> (!_(buffers))^*;
[Patches] synthsisFromSpec (ret=buffers∧buffers=0 /\ (!_(buffers))^*)@ line 469 to line 481 can be inserted with code if (ret==buffers∧buffers==0){ return; }.
[Searching Time] 9.53674316406e-07 seconds.
~~~~~~~~~ In function: swServer_create_worker_buffer ~~~~~~~~~
Future-condition checking for 'malloc': Failed!
* TRS:
* ├── ret=buffers∧buffers=0|-buffers=0
* │   └── RET(buffers)@481 |- (!_(buffers))^*  [Disprove]
* └── ret=0∧buffers=0|-buffers=0
*     └── 𝝐 |- (!_(buffers))^*  [Prove]

<======[Bidirectional Bug Localisation & Possible Proof Repairs]======>

[Repair Options] ret=buffers∧buffers=0 /\ RET(buffers)@481 ~~~> (!_(buffers))^*;
[Patches] synthsisFromSpec (ret=buffers∧buffers=0 /\ (!_(buffers))^*)@ line 469 to line 481 can be inserted with code if (ret==buffers∧buffers==0){ return; }.
[Searching Time] 3.09944152832e-06 seconds.
~~~~~~~~~ In function: swServer_start ~~~~~~~~~
Future-condition checking for 'open': Failed!
* TRS:
* ├── !(SwooleG_null_fd>0)∧SwooleG_null_fd≥0|-SwooleG_null_fd≥0
* │   └── 𝝐 |- (!close(SwooleG_null_fd))^* · close(SwooleG_null_fd) · (_)^*  [Disprove]
* ├── !(SwooleG_null_fd>0)∧ret=1∧SwooleG_null_fd≥0|-SwooleG_null_fd≥0
* │   └── 𝝐 |- (!close(SwooleG_null_fd))^* · close(SwooleG_null_fd) · (_)^*  [Disprove]
* ├── ⊤|-SwooleG_null_fd≥0
* │   └── 𝝐 |- (!close(SwooleG_null_fd))^* · close(SwooleG_null_fd) · (_)^*  [Disprove]
* └── ⊤|-SwooleG_null_fd≥0
*     └── 𝝐 |- (!close(SwooleG_null_fd))^* · close(SwooleG_null_fd) · (_)^*  [Disprove]

<======[Bidirectional Bug Localisation & Possible Proof Repairs]======>

[Repair Options] !(SwooleG_null_fd>0)∧SwooleG_null_fd≥0 /\ 𝝐 ~~~> (!close(SwooleG_null_fd))^* · close(SwooleG_null_fd) · (_)^*;
!(SwooleG_null_fd>0)∧ret=1∧SwooleG_null_fd≥0 /\ 𝝐 ~~~> (!close(SwooleG_null_fd))^* · close(SwooleG_null_fd) · (_)^*;
⊤ /\ 𝝐 ~~~> (!close(SwooleG_null_fd))^* · close(SwooleG_null_fd) · (_)^*;
⊤ /\ 𝝐 ~~~> (!close(SwooleG_null_fd))^* · close(SwooleG_null_fd) · (_)^*;
[Patches] synthsisFromSpec (!(SwooleG_null_fd>0)∧SwooleG_null_fd≥0 /\ (!close(SwooleG_null_fd))^* · close(SwooleG_null_fd) · (_)^*)@ line 608 to line 621 can be inserted with code if (!(SwooleG_null_fd>0)∧SwooleG_null_fd>=0){close(SwooleG_null_fd); }.
[Searching Time] 0.0250639915466 seconds.
~~~~~~~~~ In function: swConnection_sendfile ~~~~~~~~~
Future-condition checking for 'open': Failed!
* TRS:
* ├── ⊤|-file_fd≥0
* │   └── 𝝐 |- (!close(file_fd))^* · close(file_fd) · (_)^*  [Disprove]
* ├── ⊤|-file_fd≥0
* │   └── 𝝐 |- (!close(file_fd))^* · close(file_fd) · (_)^*  [Disprove]
* └── file_fd<0∧ret=1∧file_fd≥0|-file_fd≥0
*     └── file_fd<0∧ret=1∧file_fd≥0  [Prove]

<======[Bidirectional Bug Localisation & Possible Proof Repairs]======>

[Repair Options] ⊤ /\ 𝝐 ~~~> (!close(file_fd))^* · close(file_fd) · (_)^*;
⊤ /\ 𝝐 ~~~> (!close(file_fd))^* · close(file_fd) · (_)^*;
[Patches] synthsisFromSpec (⊤ /\ (!close(file_fd))^* · close(file_fd) · (_)^*)@ line 247 to line 273 can be inserted with code close(file_fd); .
[Searching Time] 0.016802072525 seconds.
~~~~~~~~~ In function: swConnection_sendfile ~~~~~~~~~
Future-condition checking for 'malloc': Failed!
* TRS:
* ├── file_fd<0∧ret=1∧task=0|-task=0
* │   └── free(task_filename)@243 · free(task)@244 |- (!_(task))^*  [Unfold]
* │       └── free(task)@244 |- (!_(task))^*  [Disprove]
* ├── !(file_fd<0)∧ret=0∧task=0|-task=0
* │   └── open(file_fd)@240 |- (!_(task))^*  [Unfold]
* │       └── 𝝐 |- (!_(task))^*  [Prove]
* ├── !(file_fd<0)∧ret=1∧task=0|-task=0
* │   └── open(file_fd)@240 |- (!_(task))^*  [Unfold]
* │       └── 𝝐 |- (!_(task))^*  [Prove]
* └── ret=1∧task=0|-task=0
*     └── 𝝐 |- (!_(task))^*  [Prove]

<======[Bidirectional Bug Localisation & Possible Proof Repairs]======>

[Repair Options] file_fd<0∧ret=1∧task=0 /\ free(task)@244 ~~~> (!_(task))^*;
[Patches] synthsisFromSpec (file_fd<0∧ret=1∧task=0 /\ (!_(task))^*)@ line 245 to line 246 can be inserted with code if (file_fd<0∧ret==1∧task==0){ return; }.
[Searching Time] 2.14576721191e-06 seconds.
~~~~~~~~~ In function: swTimer_add ~~~~~~~~~
Future-condition checking for 'malloc': Failed!
* TRS:
* ├── ret=tnode∧tnode=0|-tnode=0
* │   └── RET(tnode)@148 |- (!_(tnode))^*  [Disprove]
* ├── ret=0∧tnode=0|-tnode=0
* │   └── free(tnode)@145 |- (!_(tnode))^*  [Disprove]
* └── ret=0∧tnode=0|-tnode=0
*     └── 𝝐 |- (!_(tnode))^*  [Prove]

<======[Bidirectional Bug Localisation & Possible Proof Repairs]======>

[Repair Options] ret=tnode∧tnode=0 /\ RET(tnode)@148 ~~~> (!_(tnode))^*;
ret=0∧tnode=0 /\ free(tnode)@145 ~~~> (!_(tnode))^*;
[Patches] synthsisFromSpec (ret=tnode∧tnode=0 /\ (!_(tnode))^*)@ line 120 to line 148 can be inserted with code if (ret==tnode∧tnode==0){ return; }.
[Searching Time] 1.90734863281e-06 seconds.
~~~~~~~~~ In function: swPort_onRead_http ~~~~~~~~~
Future-condition checking for 'malloc': Failed!
* TRS:
* ├── ret=0∧request=0|-request=0
* │   └── deref(request) · LabelStmt() · GotoStmt() |- (!_(request))^*  [Disprove]
* ├── ret=0∧request=0|-request=0
* │   └── deref(request) · LabelStmt() · GotoStmt() · GotoStmt() · GotoStmt() |- (!_(request))^*  [Disprove]
* ├── ret=0∧request=0|-request=0
* │   └── deref(request) · LabelStmt() · GotoStmt() · GotoStmt() · GotoStmt() · GotoStmt() |- (!_(request))^*  [Disprove]
* ├── ret=0∧request=0|-request=0
* │   └── deref(request) · LabelStmt() · GotoStmt() · GotoStmt() · GotoStmt() · GotoStmt() · GotoStmt() · GotoStmt() |- (!_(request))^*  [Disprove]
* ├── ret=0∧request=0|-request=0
* │   └── deref(request) · LabelStmt() · GotoStmt() · GotoStmt() · GotoStmt() · GotoStmt() · GotoStmt() |- (!_(request))^*  [Disprove]
* ├── ret=0∧request=0|-request=0
* │   └── deref(request) · LabelStmt() · GotoStmt() · GotoStmt() |- (!_(request))^*  [Disprove]
* ├── ret=0∧request=0|-request=0
* │   └── deref(request) · LabelStmt() · LabelStmt() |- (!_(request))^*  [Disprove]
* ├── ret=0∧request=0|-request=0
* │   └── deref(request) · LabelStmt() |- (!_(request))^*  [Disprove]
* └── ret=1∧request=0|-request=0
*     └── 𝝐 |- (!_(request))^*  [Prove]

<======[Bidirectional Bug Localisation & Possible Proof Repairs]======>

[Repair Options] ret=0∧request=0 /\ deref(request) ~~~> (!_(request))^*;
ret=0∧request=0 /\ deref(request) ~~~> (!_(request))^*;
ret=0∧request=0 /\ deref(request) ~~~> (!_(request))^*;
ret=0∧request=0 /\ deref(request) ~~~> (!_(request))^*;
ret=0∧request=0 /\ deref(request) ~~~> (!_(request))^*;
ret=0∧request=0 /\ deref(request) ~~~> (!_(request))^*;
ret=0∧request=0 /\ deref(request) ~~~> (!_(request))^*;
ret=0∧request=0 /\ deref(request) ~~~> (!_(request))^*;
[Patches] synthsisFromSpec (ret=0∧request=0 /\ (!_(request))^*)@ line 327 to line 500 can be inserted with code if (ret==0∧request==0){ return; }.
[Searching Time] 3.09944152832e-06 seconds.
~~~~~~~~~ In function: swModule_load ~~~~~~~~~
Future-condition checking for 'malloc': Failed!
* TRS:
* ├── ret=module∧module=0|-module=0
* │   └── RET(module)@63 |- (!_(module))^*  [Disprove]
* ├── ret=0∧module=0|-module=0
* │   └── free(module)@60 |- (!_(module))^*  [Disprove]
* ├── ret=0∧module=0|-module=0
* │   └── free(module)@54 |- (!_(module))^*  [Disprove]
* ├── ret=0∧module=0|-module=0
* │   └── free(module)@46 |- (!_(module))^*  [Disprove]
* └── ret=0∧module=0|-module=0
*     └── 𝝐 |- (!_(module))^*  [Prove]

<======[Bidirectional Bug Localisation & Possible Proof Repairs]======>

[Repair Options] ret=module∧module=0 /\ RET(module)@63 ~~~> (!_(module))^*;
ret=0∧module=0 /\ free(module)@60 ~~~> (!_(module))^*;
ret=0∧module=0 /\ free(module)@54 ~~~> (!_(module))^*;
ret=0∧module=0 /\ free(module)@46 ~~~> (!_(module))^*;
[Patches] synthsisFromSpec (ret=module∧module=0 /\ (!_(module))^*)@ line 39 to line 63 can be inserted with code if (ret==module∧module==0){ return; }.
[Searching Time] 1.90734863281e-06 seconds.